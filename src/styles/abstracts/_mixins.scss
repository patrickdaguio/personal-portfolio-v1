@mixin font-source($family, $size, $weight, $color) {
	font-family: $family;
	font-size: $size;
	font-weight: $weight;
	@include themed() {
		color: t($color);
	}
}

@mixin flex-display($display, $align, $justify) {
	display: $display;
	align-items: $align;
	justify-content: $justify;
}

@mixin mQ($width, $type: max) {
	@if map_has_key($breakpoints, $width) {
		$width: map_get($breakpoints, $width);
		@media only screen and (#{$type}-width: $width) {
			@content;
		}
	}
}

@mixin btnAfterBorder($color, $width) {
	@include themed() {
		border: 1px solid t($color);
	}
	content: '';
	position: absolute;
	width: $width;
	top: 7px;
	right: -10px;
	height: 44px;
	z-index: -1;
	transition: 0.3s;
	@include mQ('m') {
		height: 38px;
		right: -9px;
	}
	@include mQ('xs') {
		height: 35px;
		top: 6px;
		right: -8px;
	}
	@include mQ('xxs') {
		height: 31px;
	}
}

@mixin gitchText($offset, $text) {
	content: $text;
	position: absolute;
	left: $offset;
	top: $offset;
	clip: rect(0, 900px, 0, 0);
	@include themed() {
		background-color: t($bg);
	}
	color: $highlight;
	animation: glitch 3s infinite alternate-reverse;
	animation-delay: 4s;
}

@mixin btnBeforeBorder($color) {
	@include themed() {
		background-color: t($color);
	}
	content: '';
	display: inline-block;
	height: 100%;
	width: 100%;
	position: absolute;
	top: 0;
	left: 0;
	z-index: -1;
	transition: 0.4s;
}

@mixin pageSetup($height, $width) {
	height: $height;
	max-width: $width;
	margin: 0 auto;
	@include flex-display(flex, flex-start, center);
	flex-direction: column;
}

$themes: (
	light: (
		bg: $light-bg,
		card: $card-bg,
		text: $dark-gray,
		text-secondary: $gray,
		text-highlight: $highlight,
		button-bg: $dark-gray,
		button-text: $white,
		particles: $invert,
		header-bg: $light-bg-opacity,
		header-link: $light-gray
	),
	dark: (
		bg: $dark-bg,
		card: $dark-gray,
		text: $white,
		text-secondary: $light-gray,
		text-highlight: $highlight,
		button-bg: $white,
		button-text: $gray,
		particles: $revert,
		header-bg: $dark-bg-opacity,
		header-link: $gray
	)
);

@mixin themed() {
	@each $theme, $map in $themes {
		.theme--#{$theme} & {
			$theme-map: () !global;
			@each $key, $submap in $map {
				$value: map-get(map-get($themes, $theme), '#{$key}');
				$theme-map: map-merge(
					$theme-map,
					(
						$key: $value
					)
				) !global;
			}
			@content;
			$theme-map: null !global;
		}
	}
}

@function t($key) {
	@return map-get($theme-map, $key);
}
